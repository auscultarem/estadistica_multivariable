install.packages("FNN")
install.packages("caret")
install.packages("dummies")


library(dummies)
library(FNN)
library(scales)
library(caret)

edu <- read.csv("education.csv")
dms <- dummy(edu$region, sep = "_")
edu <- cbind(cbind(edu,dms))


#rescalado de los valores
edu$urban.s <- rescale(edu$urban)
edu$income.s <- rescale(edu$income)
edu$under18.s <- rescale(edu$under18)


# Crear particiones
set.seed(2018)
t.id <- createDataPartition(edu$expense, p= 0.6, list = FALSE)
tr <- edu[t.id,]
temp <- edu[-t.id,]
v.id <- createDataPartition(temp$expense, p= 0.5, list = FALSE)
val <- temp[v.id,]
test<- temp[-v.id,]

#crear modelos
reg1 <- knn.reg(tr[,7:12], val[,7:12], tr$expense, k=1, algorithm = "brute")
rmse1 <- sqrt(mean((reg1$pred - val$expense)^2))


#segunda regresion
reg2 <- knn.reg(tr[,7:12], val[,7:12], tr$expense, k=2, algorithm = "brute")
rmse2 <- sqrt(mean((reg2$pred - val$expense)^2))

#tercera regresion
reg3 <- knn.reg(tr[,7:12], val[,7:12], tr$expense, k=3, algorithm = "brute")
rmse3 <- sqrt(mean((reg3$pred - val$expense)^2))

#cuarte regresion
reg4 <- knn.reg(tr[,7:12], val[,7:12], tr$expense, k=4, algorithm = "brute")
rmse4 <- sqrt(mean((reg4$pred - val$expense)^2))

#quinta regresion
reg5 <- knn.reg(tr[,7:12], val[,7:12], tr$expense, k=5, algorithm = "brute")
rmse5 <- sqrt(mean((reg5$pred - val$expense)^2))


errors = c(rmse1, rmse2, rmse3, rmse4, rmse5)
plot(errors, type = "o", xlab = "k", ylab = "RMSE")

#La siguiente parte se omtio porque ya es una funcion declarada.
reg.test <- knn.reg(tr[,7:12], test[,7:12], tr$expense, k=4, algorithm = "brute")
#rmse.test <- rmse(test$expense, reg.test$pred)
#rmse.test

df <- data.frame(actual = test$expense, pred = reg.test$pred)
plot(df)
abline(0,1)

df <- data.frame(actual = val$expense, pred = reg4$pred)
plot(df)
abline(0,1)

#haciendo solo dos conjuntos de validacion

t.id <-createDataPartition(edu$expense, p = 0.7, list = FALSE)
tr <- edu[t.id,]
val <- edu[-t.id,]
reg <- knn.reg(tr[,7:12], test= NULL, y=tr$expense,
               k = 4, algorithm = "brute")
rmse.reg <- sqrt(mean(reg$residuals^2))

rdacb.knn.reg <- function(tr_predictor, val_predictors,
                          tr_target, val_target, k){
  library(FNN)
  res <- knn.reg(tr_predictor, val_predictors, tr_target, k, algorithm = "brute")
  rmserror <- sqrt(mean((val_target - res$pred)^2))
  cat(paste("RMSE para k =", toString(k), ": ", rmserror,"\n", sep = " "))
  rmserror
}

limit <- 15

for(k in 1:limit){
  
  rdacb.knn.reg(tr[,7:12], val[,7:12],
                tr$expense, val$expense, k)
}

rdacb.knn.reg.multi <- function(tr_predictors, val_predictors,
                                tr_target, val_target, start_k, end_k){
  rms_errors <- vector()
  for(k in start_k:end_k){
    rms_error <- rdacb.knn.reg(tr_predictors, val_predictors,
                               tr_target, val_target, k)
    rms_errors <- c(rms_errors, rms_error)#Aqui se asigna el nuevo valor al vector 
  }
  plot(rms_errors, type = "o", xlab = "k", ylab = "RMSE")
}

rdacb.knn.reg.multi(tr[,7:12], val[,7:12], tr$expense, val$expense, start_k = 1, end_k = 15)

