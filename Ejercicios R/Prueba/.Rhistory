clab =  c("Millas/Galeon"),
pch=18,
theta = 18,
phi = 25,
main = "Coches de los 70",
xlab = "Dezplazamiento (cu.in)",
ylab = "Peso (x1000lb)",
zlab = "Millas por galeon")
scatter3D(x= mtcars$disp,
y= mtcars$wt,
z= mtcars$mpg,
clab =  c("Millas/Galeon"),
pch=18,
theta = 18,
phi = 25,
main = "Coches de los 70",
xlab = "Dezplazamiento (cu.in)",
ylab = "Peso (x1000lb)",
zlab = "Millas por galeon",
bty = "g")
scatter3D(x= mtcars$disp,
y= mtcars$wt,
z= mtcars$mpg,
clab =  c("Millas/Galeon"),
pch=18,
cex=1.5,
theta = 18,
phi = 25,
main = "Coches de los 70",
xlab = "Dezplazamiento (cu.in)",
ylab = "Peso (x1000lb)",
zlab = "Millas por galeon",
bty = "g")
library(plot3D)
mtcars <- read.csv("Documentacion de R/r-course-master/data/tema7/mtcars.csv")
head(mtcars)
rownames(mtcars) = mtcars$X # Cambio el nombre de los renglones por el nombre
#la columna X
mtcars$X = NULL #Elimino la columna X poruqe ya no es necesaria.
head(mtcars)
scatter3D(x= mtcars$disp,
y= mtcars$wt,
z= mtcars$mpg,
clab =  c("Millas/Galeon"),
pch=18,
cex=1.5,
theta = 18,
phi = 25,
main = "Coches de los 70",
xlab = "Dezplazamiento (cu.in)",
ylab = "Peso (x1000lb)",
zlab = "Millas por galeon",
bty = "g")
text3D( x=mtcars$disp,
y=mtcars$wt,
z=mtcars$mpg,
labels = rownames(mtcars),
add = TRUE,
colkey = FALSE,
cex =0.5)
scatter3D(x= mtcars$disp,
y= mtcars$wt,
z= mtcars$mpg,
clab =  c("Millas/Galeon"),
pch=18,
cex=0.5,
theta = 18,
phi = 20,
main = "Coches de los 70",
xlab = "Dezplazamiento (cu.in)",
ylab = "Peso (x1000lb)",
zlab = "Millas por galeon",
bty = "g")
text3D( x=mtcars$disp,
y=mtcars$wt,
z=mtcars$mpg,
labels = rownames(mtcars),
add = TRUE,
colkey = FALSE,
cex =0.5)
data(VADeaths)
head(VADeaths)
hist3D(z = VADeaths)
hist3D(z = VADeaths,
scale = FALSE,
expand = 0.01,
bty ="g", phi = 35)
hist3D(z = VADeaths,
scale = FALSE,
expand = 0.01,
bty ="g", phi = 35,
col = "#1188CC", border = "black",
shade =  0.2)
hist3D(z = VADeaths,
scale = FALSE,
expand = 0.01,
bty ="g", phi = 35,
col = "#1188CC", border = "black",
shade =  0.2, space = 0.3, ticktype = "detailed")
scatter3D( x = mtcars$disp,
y = mtcars$wt,
z = mtcars$mpg,
type = "h")
#sistemas de recomendaciones
install.packages("recommenderlab")
library(recommenderlab)
library(recommenderlab)
data("MovieLense")
head(MovieLense)
rating_movies <- MovieLense[rowCounts(MovieLense)>50,colCounts(MovieLense)>100]
View(rating_movies)
t.id <- sample(x = c(T,F), size = nrow(rating_movies),
replace = TRUE, prob = c(0.8,0.2))
View(rating_movies)
View(rating_movies)
data_train <- rating_movies[t.id,]
data_test <- rating_movies[!t.id,]
ibcf <- Recommender(data = data_train,
method = "IBCF",
parameter = list(k = 30))
ibcf.mod <- getModel((ibcf))
ibcf.mod
n_rec < 10 #numero de recomendaciones
ibcf.pred < predict(object = ibcf,
newdata = data_test,
n = n_rec)
ibcf.mod <- getModel(ibcf)
ibcf.mod
n_rec <- 10 #numero de recomendaciones
ibcf.pred < predict(object = ibcf,
newdata = data_test,
n = n_rec)
ibcf.pred < predict(object = ibcf,
newdata = data_test,
n = n_rec)
ibcf <- Recommender(data = data_train,
method = "IBCF",
parameter = list(k = 30))
ibcf.mod <- getModel(ibcf)
ibcf.mod
n_rec <- 10 #numero de recomendaciones
ibcf.pred < predict(object = ibcf,
newdata = data_test,
n = n_rec)
ibcf.pred <- predict(object = ibcf,
newdata = data_test,
n = n_rec)
ibcf.pred
ibcf.rec.matrix  <- sapply(ibcf.pred@items,
function(x){
colnames(rating_movies)[x]
})
ibcf.rec.matrix[,1:3]
View(ibcf.rec.matrix[,1:3])
ubcf <- Recommender(data = data_train, method = "UBCF")
ubcf.mod <- getModel(ubcf)
ubcf.mod
ubcf <- Recommender(data = data_train, method = "UBCF")
ubcf.mod <- getModel(ubcf)
ubcf.mod
ubcf.pred <- predict( object = ubcf,
newdata = data_test,
n = n_rec)
ubcf.pred
ubcf.rec.matrix <- sapply(ubcf.pred@items,
function(x){
colnames(rating_movies)
}
)
ubcg.rec.matrix[,]
ubcf.rec.matrix[,]
View(ubcf.rec.matrix[,])
ubcf.rec.matrix[,1:3]
View(ubcf.rec.matrix[,1:3])
#representacion de la matriz de recomendaciones
recommender_models <- recommnderRegistry$get_entries(dataType = "realRatingMatrix")
library(recommenderlab)
recommender_models <- recommnderRegistry$get_entries(dataType = "realRatingMatrix")
recommender_models <- recommenderRegistry$get_entries(dataType = "realRatingMatrix")
names(recommender_models)
image(MovieLense, main= "Mapa de calor de la Matrix de valoraciones de peliculas")
min_n_movies <- quantile(rowCounts(MovieLense), 0.99)
min_n_users  <-quantile(colCounts(MovieLense), 0.99)
min_n_movies
min_n_user
min_n_users
image(MovieLense[rowCounts(MovieLense)> min_n_movies,
colCounts(MovieLense)> min_n_users])
min_r_movies <-quantile(rowCounts(rating_movies), 0.98)
min_r_users <- quantile(colCounts(rating_movies), 0.98)
image(rating_movies[rowCounts(rating_movies)> min_r_movies,
colCounts(rating_movies)> min_r_users],
main ="Mapa de calor del top de peliculas y usuarios")
rating_movies_view <- binarize(rating_movies, minRating = 1)
View(rating_movies_view)
image(rating_movies_view)
t.id <- sample(x = c(TRUE,FALSE),
size = nrow(rating_movies_view),
replace = TRUE,
prob = c(0.8, 0.2))
b_data_train <- rating_movies_view[t.id]
b_data_test <- rating_movies_view[!t.id]
b_data_train <- rating_movies_view[t.id]
b_data_test <- rating_movies_view[!t.id]
b_model <- Recommender( data = b_data_train,
method = "IBCF",
parameter = list(method = "Jaccard")
)
b_details <- getModel(b_model)
b_details
b_pred <- predict ( object = b_model,
newdata = b_data_test,
n = n_rec)
b_rec_matrix <- sappply (b_pred@items, function(x){
colnames(rating_movies)[x]
})
b_rec_matrix <- sapply (b_pred@items, function(x){
colnames(rating_movies)[x]
})
View(b_rec_matrix[,1:3])
movie_url <- "http://files.grouplens.org/datasets/movielens/ml-100k/u.item"
user_url <- "http://files.grouplens.org/datasets/movielens/ml-100k/u.data"
movie_title_df <- red.table(movie_url,
header = FALSE,
sep= "|",
quote = "\"",
)
movie_title_df <- read.table(movie_url,
header = FALSE,
sep= "|",
quote = "\"",
)
View(movie_title_df)
users_df <- read.table(users_url, header = FALSE,
sep = "|", quote = "\"")
users_df <- read.table(user_url, header = FALSE,
sep = "\t", quote = "\"")
View(users_df)
View(movie_title_df)
movie_url <- "http://files.grouplens.org/datasets/movielens/ml-100k/u.item"
user_url <- "http://files.grouplens.org/datasets/movielens/ml-100k/u.data"
movie_title_df <- read.table(movie_url,
header = FALSE,
sep= "|",
quote = "\"",
)
users_df <- read.table(user_url, header = FALSE,
sep = "\t", quote = "\"")
gc()
View(movie_title_df)
View(users_df)
View(movie_title_df)
names(movie_title_df) <- c("MovieID","Title",
"ReleaseDate",
"video_realease_date",
"IMDb_URL","unknown","Action","Adventure",
"Animation","Childrens", "Comedy", "Crime",
"Documentary","Drama","Fantasy",
"FilmNoir","Horror","Musical",
"Mystery","Romance","Scifi",
"Thriller", "War","Western")
View(movie_title_df)
movie_title_df$MovieID <- NULL
movie_title_df$ReleaseDate <- NULL
movie_title_df$video_realease_date <- NULL
movie_title_df$IMDb_URL <- NULL
movie_title_df <- unique(movie_title_df)
movie_title_df <- read.table(movie_url,
header = FALSE,
sep= "|",
quote = "\"",
)
names(movie_title_df) <- c("MovieID","Title",
"ReleaseDate",
"video_realease_date",
"IMDb_URL","unknown","Action","Adventure",
"Animation","Childrens", "Comedy", "Crime",
"Documentary","Drama","Fantasy",
"FilmNoir","Horror","Musical",
"Mystery","Romance","Scifi",
"Thriller", "War","Western")
#movie_title_df$MovieID <- NULL
movie_title_df$ReleaseDate <- NULL
movie_title_df$video_realease_date <- NULL
movie_title_df$IMDb_URL <- NULL
movie_title_df <- unique(movie_title_df)
names(users_df) <- c("UserID", "MovieID", "rating", "timestamp")
View(users_df)
users_df$timestamp <- NULL
str(movie_title_df)
clusterMovies <- function(df, kclust = 10){
df <- df[,c(-1,-2)]
mclust <- kmeans(df, k = kclust, nstart = 20)
return(mclust)
}
getUserInfo <- function(df, id){
myUser <- subset(df, UserID == id, select = c(MovieID, rating))
cluster <- 0
activeUser <- data.frame(myUser[order(myUser$MovieId),], cluster)
return(activeUser)
}
setUserMovieCluster <- function(mclust, activeUser){
df_aux <- data.frame(cbind(mclust$MovieID,
clustNum = mclust$cluster))
names(df_aux) = c("MovieID", "Cluster")
activeUser$cluster <- df_aux[match(activeUser$MovieID, df_aux$MovieID), 2]
return(activeUser)
}
getAverageClusterRating <- function(mclust, activeUser, minRating = 3){
like <- aggregate(activeUser$rating,
by = list(cluster = activeUser$cluster),
mean)
if(max(like$x)<minRating){
like <- as.vector(0)
}else {
like <- as.vector(t(max(subset(like, x>=minRating, select= cluster))))
}
return(like)
}
clusterMovies <- function(df, kclust = 10){
df <- df[,c(-1,-2)]
mclust <- kmeans(df, k = kclust, nstart = 20)
return(mclust)
}
getUserInfo <- function(df, id){
myUser <- subset(df, UserID == id, select = c(MovieID, rating))
cluster <- 0
activeUser <- data.frame(myUser[order(myUser$MovieId),], cluster)
return(activeUser)
}
getAverageClusterRating <- function(mclust, activeUser, minRating = 3){
like <- aggregate(activeUser$rating,
by = list(cluster = activeUser$cluster),
mean)
if(max(like$x)<minRating){
like <- as.vector(0)
}else {
like <- as.vector(t(max(subset(like, x>=minRating, select= cluster))))
}
return(like)
}
getRecommendedMovies <-function(like, mclust, m_title_df){
df_aux <-data.frame(cbing(m_title_df$MovieID,
clusterNum = mclust$cluster)
)
names(df_aux) = c("MovieID", "Custer")
if(like == 0){
recommend <- m_title_df[sample.int(n = nrow(m_title_df),
size = 100), 1]
} else {
recommend <- as.vector(t(subset(df_aux,
Cluster == like,
select = MovieID)))
}
}
getRecommendations <- function(movie_df, user_df, userID){
mclust <- clusterMovies(movie_df)
activeUser <- getUserInfo(user_df, userID)
activeUser <- setUserMovieCluster(mclust, activeUser)
like <- getAverageClusterRating(mclust, activeUser)
recomendation <- getRecommendedMovies(like, mclust, movie_df)
#eliminamos las peliculas que ya ha visto
recomendation <- recomendation[-activeUser$MovieID]
#aÃ±adimos el titulo de la pelicula
movieTitle <- movie_df[match(recomendation, movie_df$MovieID), 2]
recomendation <- data.frame(recomendation, movieTitle)
return(recomendation)
}
suggestMovies <- function(movie_df, user_df, num_movies){
suggestions <- getRecommendations(movie_df, user_df, user_id)
suggestions <- suggestions[1:num_movies,]
writeLines("Tla vez te gustaria ver las siguiente peliculas")
write.table(suggestions[2], row.names = FALSE, col.names = FALSE)
}
clusterMovies <- function(df, kclust = 10){
df <- df[,c(-1,-2)]
mclust <- kmeans(df, centers = kclust, nstart = 20)
return(mclust)
}
suggestMovies(movie_title_df, users_df, 196, 10)
View(setUserMovieCluster)
View(setUserMovieCluster)
View(setUserMovieCluster)
setUserMovieCluster <- function(m_title_df,mclust, activeUser){
+   df_aux <- data.frame(cbind(mclust$MovieID,
clustNum = mclust$cluster))
+   names(df_aux) = c("MovieID", "Cluster")
+   activeUser$cluster <- df_aux[match(activeUser$MovieID, df_aux$MovieID), 2]
+   return(activeUser)
+ }
setUserMovieCluster <- function(m_title_df, mclust, activeUser){
+   df_aux <- data.frame(cbind(mclust$MovieID,
clustNum = mclust$cluster))
+   names(df_aux) = c("MovieID", "Cluster")
+   activeUser$cluster <- df_aux[match(activeUser$MovieID, df_aux$MovieID), 2]
+   return(activeUser)
}
getRecommendations <- function(movie_df, user_df, userID){
mclust <- clusterMovies(movie_df)
activeUser <- getUserInfo(user_df, userID)
activeUser <- setUserMovieCluster(movie_df,mclust, activeUser)
like <- getAverageClusterRating(mclust, activeUser)
recomendation <- getRecommendedMovies(like, mclust, movie_df)
#eliminamos las peliculas que ya ha visto
recomendation <- recomendation[-activeUser$MovieID]
#aÃ±adimos el titulo de la pelicula
movieTitle <- movie_df[match(recomendation, movie_df$MovieID), 2]
recomendation <- data.frame(recomendation, movieTitle)
return(recomendation)
}
setUserMovieCluster <- function(m_title_df, mclust, activeUser){
+   df_aux <- data.frame(cbind(m_title_df$MovieID,
clustNum = mclust$cluster))
+   names(df_aux) = c("MovieID", "Cluster")
+   activeUser$cluster <- df_aux[match(activeUser$MovieID, df_aux$MovieID), 2]
+   return(activeUser)
}
suggestMovies <- function(movie_df, user_df, user_id, num_movies){
suggestions <- getRecommendations(movie_df, user_df, user_id)
suggestions <- suggestions[1:num_movies,]
writeLines("Tla vez te gustaria ver las siguiente peliculas")
write.table(suggestions[2], row.names = FALSE, col.names = FALSE)
}
suggestMovies(movie_title_df, users_df, 196, 10)
names(users_df) <- c("UserID", "MovieId", "rating", "timestamp")
users_df$timestamp <- NULL
names(users_df) <- c("UserID", "MovieID", "rating", "timestamp")
users_df$timestamp <- NULL
getUserInfo <- function(df, id){
myUser <- subset(df, UserID == id, select = c(MovieID, rating))
cluster <- 0
activeUser <- data.frame(myUser[order(myUser$MovieID),], cluster)
return(activeUser)
}
suggestMovies(movie_title_df, users_df, 196, 10)
setUserMovieCluster <- function(m_title_df, mclust, activeUser){
+   df_aux <- data.frame(cbind(m_title_df$MovieID,
clustNum = mclust$cluster))
+   names(df_aux) = c("MovieID", "Cluster")
+   activeUser$cluster <- df_aux[match(activeUser$MovieID, df_aux$MovieID), 2]
+   return(activeUser)
}
getRecommendations <- function(movie_df, user_df, userID){
mclust <- clusterMovies(movie_df)
activeUser <- getUserInfo(user_df, userID)
activeUser <- setUserMovieCluster(movie_df,mclust, activeUser)
like <- getAverageClusterRating(mclust, activeUser)
recomendation <- getRecommendedMovies(like, mclust, movie_df)
#eliminamos las peliculas que ya ha visto
recomendation <- recomendation[-activeUser$MovieID]
#aÃ±adimos el titulo de la pelicula
movieTitle <- movie_df[match(recomendation, movie_df$MovieID), 2]
recomendation <- data.frame(recomendation, movieTitle)
return(recomendation)
}
suggestMovies <- function(movie_df, user_df, user_id, num_movies){
suggestions <- getRecommendations(movie_df, user_df, user_id)
suggestions <- suggestions[1:num_movies,]
writeLines("Tla vez te gustaria ver las siguiente peliculas")
write.table(suggestions[2], row.names = FALSE, col.names = FALSE)
}
suggestMovies(movie_title_df, users_df, 196, 10)
suggestMovies(movie_title_df, users_df, 196, 10)
function(m_title_df, mclust, activeUser){
+   df_aux <- data.frame(cbind(m_title_df$MovieID,
clustNum = mclust$cluster))
+   names(df_aux) = c("MovieID", "Cluster")
+   activeUser$cluster <- df_aux[match(activeUser$MovieID, df_aux$MovieID), 2]
+   return(activeUser)
}
suggestMovies(movie_title_df, users_df, 196, 10)
setUserMovieCluster <- function(m_title_df, mclust, activeUser){
+   df_aux <- data.frame(cbind(m_title_df$MovieID,
clustNum = mclust$cluster))
+   names(df_aux) = c("MovieID", "Cluster")
+   activeUser$cluster <- df_aux[match(activeUser$MovieID, df_aux$MovieID), 2]
+   return(activeUser)
}
setUserMovieCluster <- function(m_title_df, mclust, activeUser){
+   df_aux <- data.frame(cbind(m_title_df$MovieID,
clustNum = mclust$cluster))
+   names(df_aux) = c("MovieID", "Cluster")
+   activeUser$cluster <- df_aux[match(activeUser$MovieID, df_aux$MovieID), 2]
+   return(activeUser)
}
suggestMovies(movie_title_df, users_df, 196, 10)
setUserMovieCluster <- function(m_title_df, mclust, activeUser){
df_aux <- data.frame(cbind(m_title_df$MovieID,
clustNum = mclust$cluster))
names(df_aux) = c("MovieID", "Cluster")
activeUser$cluster <- df_aux[match(activeUser$MovieID, df_aux$MovieID), 2]
return(activeUser)
}
suggestMovies(movie_title_df, users_df, 196, 10)
getRecommendedMovies <-function(like, mclust, m_title_df){
df_aux <-data.frame(cbind(m_title_df$MovieID,
clusterNum = mclust$cluster)
)
names(df_aux) = c("MovieID", "Cluster")
if(like == 0){
recommend <- m_title_df[sample.int(n = nrow(m_title_df),
size = 100), 1]
} else {
recommend <- as.vector(t(subset(df_aux,
Cluster == like,
select = MovieID)))
}
}
suggestMovies(movie_title_df, users_df, 196, 10)
install.packages('vitae')
install.packages("devtools")
devtools::install_github("mitchelloharawild/vitae")
